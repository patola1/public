let img;
let bgColor = 0
let trailColor;


const USER = 0;
const FOURIER = 1;

let x = [];
let fourierX;
let time = 0;
let path = [];
let drawing = [];
let state = -1;


function mousePressed() {
  bgColor= img
  state = USER;
  drawing = [];
  x = [];
  time = 0;
  path = [];

}




function mouseReleased() {

  state = FOURIER;
  const skip = 1;
  for (let i = 0; i < drawing.length; i += skip) {
    x.push(new Complex(drawing[i].x, drawing[i].y));
  }
  fourierX = dft(x);
  fourierX.sort((a, b) => b.amp - a.amp);

}



function setup() {
  createCanvas(700, 600);
  // frameRate(20)



  rate = 1
}



function epicycles(x, y, rotation, fourier) {



  for (let i = 0; i < fourier.length; i++) {
    let prevx = x;
    let prevy = y;
    let freq = fourier[i].freq;
    let radius = fourier[i].amp;
    let phase = fourier[i].phase;
    x += radius * cos((freq * (time*rate) + phase + rotation));
    y += radius * sin((freq * (time*rate) + phase + rotation));

    strokeWeight(1)
    stroke(0,0,255);
    line(prevx, prevy, x, y);
    stroke(255,0,0, 100);
    noFill();
    ellipse(prevx, prevy, radius * 2);

  }

  return createVector(x, y);

}






function draw() {
    background(200);





    let x = [101,111,126,139,150,157,168,179,189,194,196,196,198,199,197,203,217,232,243,256,274,274,274,270,268,263,256,252,247,244,236,235,230,226,222,232,243,251,260,265,267,269,267,265,275,285,293,301,316,309,325,334,345,356,369,386,400,408,400,395,391,388,381,379,376,374,372,368,364,361,370,375,384,384,386,386,386,386,387,387,396,408,416,436,445,458,473,485,499,511,527,542,544,542,539,536,535,532,528,526,524,517,515,512,508,508,511,513,517,521,522,521,521,520,520,518,518,520,518,518,513,505,501,499,497,495,492,488,484,480,476,471,463,456,448,438,422,406,396,389,375,366,354,342,329,319,312,302,298,288,280,272,258,254,248,244,240,239,231,225,221,215,208,203,195,182,168,168,164,154,147,141,139,132,118,111,104,101,100,100,112,127,139,148,158,169,182,189,202,212,222,232,245,256,264,266,268,266,266,254,246,242,239,237,236,235,235,235,240,246,248,241,233,224,214,206,221,236,252,261,267,273,280,286,288,295,297,298,296,296,296,295,296,298,302,307,315,325,332,341,355,366,377,382,388,402,413,425,437,441,446,446,450,457,459,465,467,474,474,470,460,454,446,437,431,444,451,463,438,430,424,419,415,412,412,411,411,411,412,416,418,420,423,425,425,425,419,415,414,409,405,403,397,392,388,394,396,396,389,383,371,366,360,354,345,355,364,370,374,378,388,397,406,414,420,425,427,422,416,424,423,419,416,413,407,403,397,392,391,390,389,388,387,387,386,384,383,387,390,384,380,377,391,382,402,409,415,422,431,437,442,446,451,455,459,463,466,471,475,479,481,483,484,487,484,480,477,475,474,472,472,464,461,458,455,450,445,439,432,429,424,422,421,425,428,430,435,438,441,445,448,452,452,452,452,451,449,447,444,443,441,441,441,441,441,441,439,439,443,447,451,454,458,468,465,469,470,470,473,472,472,469,468,464,463,460,457,456,454,452,449,448,448,448,446,442,438,434,430,426,423,414,403,389,383,379,368,355,341,331,324,316,307,303,298,298,297,297,296,305,310,314,322,332,345,355,358,347,338,324,311,303,293,288,284,287,287,300,294,300,305,311,318,322,327,333,338,342,345,352,357,359,354,347,341,340,339,339,336,330,327,323,321,321,319,311,310,322,328,333,333,333,333,333,333,333,333,333,333,333,333,333,333,333
]


    let y = [471,463,459,452,461,473,486,491,503,518,531,547,565,580,588,597,596,597,597,597,597,585,569,550,534,519,507,493,479,471,455,448,439,428,419,410,406,404,396,383,372,358,344,333,356,370,379,387,399,392,404,411,418,422,426,426,425,423,438,452,459,469,479,487,494,501,509,517,527,535,523,510,501,495,507,524,537,546,564,578,578,577,577,577,577,578,576,576,579,578,580,580,568,553,543,530,516,506,498,483,473,462,446,436,421,408,394,385,375,364,353,338,328,315,302,288,277,264,248,234,221,206,195,183,170,157,146,131,120,109,99,89,82,73,68,62,57,57,66,73,65,65,65,67,72,76,81,89,93,109,115,127,137,141,148,154,168,178,194,208,222,230,238,253,269,271,285,301,310,329,342,353,358,367,376,390,409,424,445,465,464,459,452,444,439,436,431,427,423,421,417,410,405,399,388,376,361,349,336,333,329,322,319,313,307,300,292,281,271,266,256,259,263,265,268,268,267,263,252,248,239,234,225,212,202,191,176,165,158,146,134,124,148,155,149,138,126,116,114,111,107,104,102,102,102,103,103,109,118,122,126,131,145,155,166,175,181,192,201,194,186,184,183,181,183,187,188,192,186,185,190,196,200,206,223,230,238,251,255,259,265,272,279,284,293,302,304,304,298,294,298,301,301,297,301,307,317,321,322,322,325,329,336,343,347,346,340,335,331,330,327,327,327,329,333,340,346,348,347,348,353,360,363,365,367,369,370,370,374,379,386,390,395,403,410,415,423,405,368,368,366,365,370,422,422,420,413,406,399,395,388,381,374,367,358,352,344,336,327,316,308,301,297,290,283,274,268,258,250,243,237,238,240,241,241,240,240,238,236,236,236,236,232,230,228,227,225,225,224,224,226,227,229,230,233,233,235,235,234,234,234,233,233,233,230,230,229,225,224,224,224,225,226,234,232,233,229,224,216,210,200,183,177,172,171,167,164,157,151,146,141,134,135,131,125,124,118,115,115,112,111,102,102,101,102,102,103,107,111,114,115,126,138,148,158,163,171,177,190,187,181,181,180,179,178,177,178,180,182,181,180,187,196,205,215,221,221,227,225,228,228,231,232,236,236,236,235,234,233,232,232,228,224,220,220,220,224,227,228,231,231,227,225,222,220,220,221,220,218,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-26,-28,-28,-28,-28,-22,-22,-22,-22,-22,-22,-22,-22,-23,-23,-23,-23,-23,-62,-62,-38,-35,-35,-35,-35,-61,-61,-25,-25,-69,-21,-21,-21,-21,-21,-21,-21,-21
]


    for(let i = 0; i < x.length; i = i + 1){
       drawing[i*2] = createVector(x[i]- width / 2,y[i]- height / 2)
       drawing[i*2 + 1] = createVector(x[i]- width / 2,y[i]- height / 2)

    }



if (state == FOURIER) {

    let v = epicycles(width / 2, height / 2, 0, fourierX);
    path.unshift(v);
    beginShape();
    noFill();
    strokeWeight(1);
    stroke(0,0,0);
    for (let i = 0; i < path.length; i++) {
      vertex(path[i].x, path[i].y);
    }
    endShape();

    const dt = TWO_PI / fourierX.length;
    time += dt;

    if (time > TWO_PI) {
      time = 0;
      path = [];
    }
  }

}
