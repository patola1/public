let img;
let bgColor = 0
let trailColor;


const USER = 0;
const FOURIER = 1;

let x = [];
let fourierX;
let time = 0;
let path = [];
let drawing = [];
let state = -1;


function mousePressed() {
  bgColor= img
  state = USER;
  drawing = [];
  x = [];
  time = 0;
  path = [];

}




function mouseReleased() {

  state = FOURIER;
  const skip = 1;
  for (let i = 0; i < drawing.length; i += skip) {
    x.push(new Complex(drawing[i].x, drawing[i].y));
  }
  fourierX = dft(x);
  fourierX.sort((a, b) => b.amp - a.amp);

}



function setup() {
  createCanvas(700, 600);
  // frameRate(20)



  rate = 1
}



function epicycles(x, y, rotation, fourier) {



  for (let i = 0; i < fourier.length; i++) {
    let prevx = x;
    let prevy = y;
    let freq = fourier[i].freq;
    let radius = fourier[i].amp;
    let phase = fourier[i].phase;
    x += radius * cos((freq * (time*rate) + phase + rotation));
    y += radius * sin((freq * (time*rate) + phase + rotation));

    strokeWeight(1)
    stroke(0,0,255);
    line(prevx, prevy, x, y);
    stroke(255,0,0, 100);
    noFill();
    ellipse(prevx, prevy, radius * 2);

  }

  return createVector(x, y);

}






function draw() {
    background(200);





    let x = [538,551,566,580,595,609,621,633,644,656,665,675,686,687,687,687,689,689,689,689,689,689,689,690,690,690,690,671,650,629,606,584,566,545,522,506,487,467,446,427,406,380,355,334,322,300,279,266,248,231,215,196,205,219,230,247,260,267,229,229,232,249,262,268,268,268,268,267,268,270,271,272,273,277,279,279,281,283,286,288,291,295,303,309,315,322,331,339,347,355,361,367,371,378,380,384,388,387,379,379,379,378,379,375,367,362,361,359,348,351,353,353,354,354,354,358,363,365,366,367,367,367,375,377,379,373,366,359,355,355,354,352,351,350,347,341,334,335,332,323,323,326,327,327,327,327,327,335,338,340,343,345,345,344,343,342,335,334,331,329,328,327,327,323,320,319,319,318,316,317,317,317,320,325,334,338,342,351,366,386,400,415,419,426,427,432,433,434,435,443,453,458,463,469,481,481,484,487,491,498,504,506,508,510,510,509,524,533,539,550,563,548,529,523,521,518,507,495,486,477,475,472,466,460,450,443,436,427,419,411,402,390,380,373,359,350,335,329,313,299,287,283,275,265,257,244,229,225,219,213,210,206,203,199,199,198,198,199,203,207,213,218,223,226,231,243,243,246,246,246,247,250,250,254,258,250,246,245,245,243,244,245,245,245,246,246,247,247,250,251,254,256,260,263,268,271,272,274,275,277,279,279,280,283,287,292,300,311,318,323,329,336,341,344,348,351,357,363,370,374,383,387,385,383,375,368,367,363,356,354,362,369,370,371,370,367,363,355,347,355,359,363,371,380,389,395,403,412,422,427,427,427,427,423,415,411,405,404,399,399,398,398,398,398,402,406,411,418,428,438,431,417,403,399,399,399,399,398,401,407,409,399,403,411,417,426,431,435,440,444,445,447,447,451,454,459,471,475,481,496,506,491,472,464,457,450,442,439,435,419,413,407,412,427,433,443,446,446,445,433,410,400,392,386,377,369,355,342,330,317,303,282,274,263,255,248,244,238,238,236,235,235,235,240,243,252,256,265,259,259,267,270,275,279,282,287,294,299,299,299,297,293,291,291,287,289,295,295,296,295,294,287,283,274,267,261,251,255,262,270,280,283,291,300,303,305,307,312,315,319,322,324,327,332,337,338,339,346,349,353,353,348,354,353,353,349,341,339,339,337,331,323,319,316,314,311,307,303,300,298,295,291,283,275,268,277,287,295,299,307,314,323,332,342,350,360,367,373,375,371,361,355,352,344,338,335,333,333,343,351,358,361,363,363,355,348,346,346,354,356,351,358,356,356,45,45,26,26,7,7,7,107,107,107,107,107
]


    let y = [316,319,323,329,336,343,351,359,369,383,388,396,400,417,432,445,460,475,487,504,518,518,532,547,567,577,594,595,596,597,595,595,595,595,595,596,594,595,595,595,596,595,594,594,596,598,598,599,599,599,599,600,588,583,576,564,556,552,576,587,594,596,596,594,582,566,548,531,519,504,493,473,457,440,426,406,390,376,360,348,332,324,326,328,332,334,338,340,344,350,356,363,372,379,388,393,400,408,409,401,394,391,410,414,408,400,395,386,383,389,396,403,411,423,432,436,438,435,428,424,417,412,413,421,436,439,439,436,426,419,414,408,397,391,381,380,377,379,388,390,400,408,416,424,434,439,442,435,425,418,412,405,398,393,403,411,429,436,445,452,456,461,469,487,502,511,516,528,543,552,560,563,573,588,592,594,596,599,599,588,589,587,580,568,560,544,532,522,512,500,485,477,470,460,440,440,431,416,407,388,368,351,342,332,324,314,312,314,316,318,320,307,296,279,271,257,240,224,208,188,172,152,139,124,112,98,85,75,67,54,43,30,21,18,7,4,-34,4,3,5,10,13,20,32,44,54,62,72,92,100,105,112,122,139,156,174,182,192,204,231,243,260,278,289,304,334,352,382,404,429,447,476,487,509,519,488,460,444,428,420,410,402,380,367,355,342,310,304,290,277,262,258,251,251,255,259,261,264,271,276,284,288,296,306,316,323,325,328,332,336,330,324,316,310,304,298,292,285,282,278,268,264,268,275,283,289,296,308,315,321,315,298,301,301,308,316,324,332,348,350,357,360,364,366,366,365,375,384,400,413,428,419,406,402,392,385,376,392,400,407,412,412,426,446,456,466,476,486,493,500,496,487,468,452,444,436,426,402,392,385,377,365,361,347,334,324,308,293,277,264,244,236,232,246,258,268,285,289,297,312,309,306,289,274,252,242,236,224,214,194,182,176,180,170,163,159,162,169,188,196,182,164,156,147,132,125,109,100,85,79,76,72,78,80,89,98,108,124,136,151,164,172,182,202,222,235,215,210,221,235,244,249,264,251,240,236,234,232,234,241,236,238,240,241,242,246,246,240,240,245,249,256,261,255,242,235,225,216,212,206,205,205,208,217,227,232,240,254,268,279,287,295,293,286,290,284,273,265,265,260,247,247,247,256,258,264,266,274,278,286,288,295,284,273,257,248,238,222,216,210,208,206,203,203,208,200,188,182,179,174,156,144,137,124,123,123,129,136,137,148,152,159,161,168,173,176,186,190,193,188,174,169,160,155,159,165,173,180,178,168,172,168,171,170,-59,-59,-59,-59,-63,-63,-63,-53,-53,-53,-53,-53
]


    for(let i = 0; i < x.length; i = i + 1){
       drawing[i] = createVector(x[i]- width / 2,y[i]- height / 2)


    }



if (state == FOURIER) {

    let v = epicycles(width / 2, height / 2, 0, fourierX);
    path.unshift(v);
    beginShape();
    noFill();
    strokeWeight(1);
    stroke(0,0,0);
    for (let i = 0; i < path.length; i++) {
      vertex(path[i].x, path[i].y);
    }
    endShape();

    const dt = TWO_PI / fourierX.length;
    time += dt;

    if (time > TWO_PI) {
      time = 0;
      path = [];
    }
  }

}
